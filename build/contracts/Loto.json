{
  "contractName": "Loto",
  "abi": [],
  "michelson": "[ { \"prim\": \"parameter\",\n    \"args\":\n      [ { \"prim\": \"or\",\n          \"args\":\n            [ { \"prim\": \"or\",\n                \"args\":\n                  [ { \"prim\": \"nat\", \"annots\": [ \"%bet\" ] },\n                    { \"prim\": \"unit\", \"annots\": [ \"%fund\" ] } ] },\n              { \"prim\": \"or\",\n                \"args\":\n                  [ { \"prim\": \"unit\", \"annots\": [ \"%initialize\" ] },\n                    { \"prim\": \"nat\", \"annots\": [ \"%launchLoto\" ] } ] } ] } ] },\n  { \"prim\": \"storage\",\n    \"args\":\n      [ { \"prim\": \"pair\",\n          \"args\":\n            [ { \"prim\": \"pair\",\n                \"args\":\n                  [ { \"prim\": \"address\", \"annots\": [ \"%creator\" ] },\n                    { \"prim\": \"bool\", \"annots\": [ \"%initialized\" ] } ] },\n              { \"prim\": \"pair\",\n                \"args\":\n                  [ { \"prim\": \"mutez\", \"annots\": [ \"%minAmount\" ] },\n                    { \"prim\": \"set\",\n                      \"args\":\n                        [ { \"prim\": \"pair\",\n                            \"args\":\n                              [ { \"prim\": \"address\", \"annots\": [ \"%addr\" ] },\n                                { \"prim\": \"nat\", \"annots\": [ \"%number\" ] } ] } ],\n                      \"annots\": [ \"%players\" ] } ] } ] } ] },\n  { \"prim\": \"code\",\n    \"args\":\n      [ [ { \"prim\": \"LAMBDA\",\n            \"args\":\n              [ { \"prim\": \"pair\",\n                  \"args\": [ { \"prim\": \"bool\" }, { \"prim\": \"string\" } ] },\n                { \"prim\": \"unit\" },\n                [ { \"prim\": \"UNPAIR\" },\n                  { \"prim\": \"IF\",\n                    \"args\":\n                      [ [ { \"prim\": \"DROP\" } ], [ { \"prim\": \"FAILWITH\" } ] ] },\n                  { \"prim\": \"UNIT\" } ] ] }, { \"prim\": \"SWAP\" },\n          { \"prim\": \"UNPAIR\" },\n          { \"prim\": \"IF_LEFT\",\n            \"args\":\n              [ [ { \"prim\": \"IF_LEFT\",\n                    \"args\":\n                      [ [ { \"prim\": \"SWAP\" },\n                          { \"prim\": \"PUSH\",\n                            \"args\":\n                              [ { \"prim\": \"string\" },\n                                { \"string\": \"Tezos.amount = self.minAmount\" } ] },\n                          { \"prim\": \"SWAP\" }, { \"prim\": \"DUP\" },\n                          { \"prim\": \"DUG\", \"args\": [ { \"int\": \"2\" } ] },\n                          { \"prim\": \"CDR\" }, { \"prim\": \"CAR\" },\n                          { \"prim\": \"AMOUNT\" }, { \"prim\": \"COMPARE\" },\n                          { \"prim\": \"GE\" }, { \"prim\": \"PAIR\" },\n                          { \"prim\": \"DUP\", \"args\": [ { \"int\": \"4\" } ] },\n                          { \"prim\": \"SWAP\" }, { \"prim\": \"EXEC\" },\n                          { \"prim\": \"DROP\" },\n                          { \"prim\": \"PUSH\",\n                            \"args\":\n                              [ { \"prim\": \"string\" },\n                                { \"string\":\n                                    \"(number > 0n) and (number <= 1000n)\" } ] },\n                          { \"prim\": \"PUSH\",\n                            \"args\": [ { \"prim\": \"nat\" }, { \"int\": \"1000\" } ] },\n                          { \"prim\": \"DUP\", \"args\": [ { \"int\": \"4\" } ] },\n                          { \"prim\": \"COMPARE\" }, { \"prim\": \"LE\" },\n                          { \"prim\": \"PUSH\",\n                            \"args\": [ { \"prim\": \"nat\" }, { \"int\": \"0\" } ] },\n                          { \"prim\": \"DUP\", \"args\": [ { \"int\": \"5\" } ] },\n                          { \"prim\": \"COMPARE\" }, { \"prim\": \"GT\" },\n                          { \"prim\": \"AND\" }, { \"prim\": \"PAIR\" },\n                          { \"prim\": \"DIG\", \"args\": [ { \"int\": \"3\" } ] },\n                          { \"prim\": \"SWAP\" }, { \"prim\": \"EXEC\" },\n                          { \"prim\": \"DROP\" }, { \"prim\": \"SWAP\" },\n                          { \"prim\": \"SENDER\" }, { \"prim\": \"PAIR\" },\n                          { \"prim\": \"SWAP\" }, { \"prim\": \"DUP\" },\n                          { \"prim\": \"DUG\", \"args\": [ { \"int\": \"2\" } ] },\n                          { \"prim\": \"CDR\" }, { \"prim\": \"CDR\" },\n                          { \"prim\": \"SWAP\" },\n                          { \"prim\": \"PUSH\",\n                            \"args\":\n                              [ { \"prim\": \"bool\" }, { \"prim\": \"True\" } ] },\n                          { \"prim\": \"SWAP\" }, { \"prim\": \"UPDATE\" },\n                          { \"prim\": \"SWAP\" }, { \"prim\": \"DUP\" },\n                          { \"prim\": \"DUG\", \"args\": [ { \"int\": \"2\" } ] },\n                          { \"prim\": \"CDR\" }, { \"prim\": \"CAR\" },\n                          { \"prim\": \"PAIR\" }, { \"prim\": \"SWAP\" },\n                          { \"prim\": \"CAR\" }, { \"prim\": \"PAIR\" },\n                          { \"prim\": \"NIL\",\n                            \"args\": [ { \"prim\": \"operation\" } ] },\n                          { \"prim\": \"PAIR\" } ],\n                        [ { \"prim\": \"DROP\" }, { \"prim\": \"SWAP\" },\n                          { \"prim\": \"DROP\" },\n                          { \"prim\": \"NIL\",\n                            \"args\": [ { \"prim\": \"operation\" } ] },\n                          { \"prim\": \"PAIR\" } ] ] } ],\n                [ { \"prim\": \"IF_LEFT\",\n                    \"args\":\n                      [ [ { \"prim\": \"DROP\" },\n                          { \"prim\": \"PUSH\",\n                            \"args\":\n                              [ { \"prim\": \"string\" },\n                                { \"string\": \"Creator already exist\" } ] },\n                          { \"prim\": \"PUSH\",\n                            \"args\":\n                              [ { \"prim\": \"bool\" }, { \"prim\": \"False\" } ] },\n                          { \"prim\": \"DUP\", \"args\": [ { \"int\": \"3\" } ] },\n                          { \"prim\": \"CAR\" }, { \"prim\": \"CDR\" },\n                          { \"prim\": \"COMPARE\" }, { \"prim\": \"EQ\" },\n                          { \"prim\": \"PAIR\" },\n                          { \"prim\": \"DIG\", \"args\": [ { \"int\": \"2\" } ] },\n                          { \"prim\": \"SWAP\" }, { \"prim\": \"EXEC\" },\n                          { \"prim\": \"DROP\" }, { \"prim\": \"DUP\" },\n                          { \"prim\": \"CDR\" },\n                          { \"prim\": \"PUSH\",\n                            \"args\":\n                              [ { \"prim\": \"bool\" }, { \"prim\": \"True\" } ] },\n                          { \"prim\": \"DIG\", \"args\": [ { \"int\": \"2\" } ] },\n                          { \"prim\": \"CAR\" }, { \"prim\": \"CAR\" },\n                          { \"prim\": \"PAIR\" }, { \"prim\": \"CDR\" },\n                          { \"prim\": \"SENDER\" }, { \"prim\": \"PAIR\" },\n                          { \"prim\": \"PAIR\" }, { \"prim\": \"DUP\" },\n                          { \"prim\": \"CDR\" }, { \"prim\": \"CDR\" },\n                          { \"prim\": \"PUSH\",\n                            \"args\":\n                              [ { \"prim\": \"mutez\" }, { \"int\": \"1000000\" } ] },\n                          { \"prim\": \"PAIR\" }, { \"prim\": \"SWAP\" },\n                          { \"prim\": \"CAR\" }, { \"prim\": \"PAIR\" },\n                          { \"prim\": \"NIL\",\n                            \"args\": [ { \"prim\": \"operation\" } ] },\n                          { \"prim\": \"PAIR\" } ],\n                        [ { \"prim\": \"SWAP\" },\n                          { \"prim\": \"PUSH\",\n                            \"args\":\n                              [ { \"prim\": \"string\" },\n                                { \"string\": \"Tezos.sender = self.creator\" } ] },\n                          { \"prim\": \"SWAP\" }, { \"prim\": \"DUP\" },\n                          { \"prim\": \"DUG\", \"args\": [ { \"int\": \"2\" } ] },\n                          { \"prim\": \"CAR\" }, { \"prim\": \"CAR\" },\n                          { \"prim\": \"SENDER\" }, { \"prim\": \"COMPARE\" },\n                          { \"prim\": \"EQ\" }, { \"prim\": \"PAIR\" },\n                          { \"prim\": \"DUP\", \"args\": [ { \"int\": \"4\" } ] },\n                          { \"prim\": \"SWAP\" }, { \"prim\": \"EXEC\" },\n                          { \"prim\": \"DROP\" },\n                          { \"prim\": \"PUSH\",\n                            \"args\":\n                              [ { \"prim\": \"string\" },\n                                { \"string\": \"size(self.players) > 0n\" } ] },\n                          { \"prim\": \"PUSH\",\n                            \"args\": [ { \"prim\": \"nat\" }, { \"int\": \"0\" } ] },\n                          { \"prim\": \"DUP\", \"args\": [ { \"int\": \"3\" } ] },\n                          { \"prim\": \"CDR\" }, { \"prim\": \"CDR\" },\n                          { \"prim\": \"SIZE\" }, { \"prim\": \"COMPARE\" },\n                          { \"prim\": \"GT\" }, { \"prim\": \"PAIR\" },\n                          { \"prim\": \"DIG\", \"args\": [ { \"int\": \"3\" } ] },\n                          { \"prim\": \"SWAP\" }, { \"prim\": \"EXEC\" },\n                          { \"prim\": \"DROP\" },\n                          { \"prim\": \"EMPTY_SET\",\n                            \"args\": [ { \"prim\": \"address\" } ] },\n                          { \"prim\": \"SWAP\" }, { \"prim\": \"DUP\" },\n                          { \"prim\": \"DUG\", \"args\": [ { \"int\": \"2\" } ] },\n                          { \"prim\": \"CDR\" }, { \"prim\": \"CDR\" },\n                          { \"prim\": \"ITER\",\n                            \"args\":\n                              [ [ { \"prim\": \"DUP\",\n                                    \"args\": [ { \"int\": \"4\" } ] },\n                                  { \"prim\": \"SWAP\" }, { \"prim\": \"DUP\" },\n                                  { \"prim\": \"DUG\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"CDR\" }, { \"prim\": \"COMPARE\" },\n                                  { \"prim\": \"EQ\" },\n                                  { \"prim\": \"IF\",\n                                    \"args\":\n                                      [ [ { \"prim\": \"CAR\" },\n                                          { \"prim\": \"PUSH\",\n                                            \"args\":\n                                              [ { \"prim\": \"bool\" },\n                                                { \"prim\": \"True\" } ] },\n                                          { \"prim\": \"SWAP\" },\n                                          { \"prim\": \"UPDATE\" } ],\n                                        [ { \"prim\": \"DROP\" } ] ] } ] ] },\n                          { \"prim\": \"NIL\",\n                            \"args\": [ { \"prim\": \"operation\" } ] },\n                          { \"prim\": \"DUP\", \"args\": [ { \"int\": \"3\" } ] },\n                          { \"prim\": \"CDR\" }, { \"prim\": \"CDR\" },\n                          { \"prim\": \"ITER\",\n                            \"args\":\n                              [ [ { \"prim\": \"DUP\",\n                                    \"args\": [ { \"int\": \"5\" } ] },\n                                  { \"prim\": \"SWAP\" }, { \"prim\": \"DUP\" },\n                                  { \"prim\": \"DUG\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"CDR\" }, { \"prim\": \"COMPARE\" },\n                                  { \"prim\": \"EQ\" },\n                                  { \"prim\": \"IF\",\n                                    \"args\":\n                                      [ [ { \"prim\": \"CAR\" },\n                                          { \"prim\": \"CONTRACT\",\n                                            \"args\": [ { \"prim\": \"unit\" } ] },\n                                          { \"prim\": \"IF_NONE\",\n                                            \"args\":\n                                              [ [ { \"prim\": \"PUSH\",\n                                                    \"args\":\n                                                      [ { \"prim\": \"string\" },\n                                                        { \"string\":\n                                                            \"Not a contract\" } ] },\n                                                  { \"prim\": \"FAILWITH\" } ],\n                                                [] ] },\n                                          { \"prim\": \"DUP\",\n                                            \"args\": [ { \"int\": \"3\" } ] },\n                                          { \"prim\": \"SIZE\" },\n                                          { \"prim\": \"BALANCE\" },\n                                          { \"prim\": \"EDIV\" },\n                                          { \"prim\": \"IF_NONE\",\n                                            \"args\":\n                                              [ [ { \"prim\": \"PUSH\",\n                                                    \"args\":\n                                                      [ { \"prim\": \"string\" },\n                                                        { \"string\":\n                                                            \"DIV by 0\" } ] },\n                                                  { \"prim\": \"FAILWITH\" } ],\n                                                [] ] }, { \"prim\": \"CAR\" },\n                                          { \"prim\": \"UNIT\" },\n                                          { \"prim\": \"TRANSFER_TOKENS\" },\n                                          { \"prim\": \"CONS\" } ],\n                                        [ { \"prim\": \"DROP\" } ] ] } ] ] },\n                          { \"prim\": \"SWAP\" }, { \"prim\": \"DROP\" },\n                          { \"prim\": \"DIG\", \"args\": [ { \"int\": \"2\" } ] },\n                          { \"prim\": \"DROP\" },\n                          { \"prim\": \"EMPTY_SET\",\n                            \"args\":\n                              [ { \"prim\": \"pair\",\n                                  \"args\":\n                                    [ { \"prim\": \"address\" },\n                                      { \"prim\": \"nat\" } ] } ] },\n                          { \"prim\": \"DUP\", \"args\": [ { \"int\": \"3\" } ] },\n                          { \"prim\": \"CDR\" }, { \"prim\": \"CAR\" },\n                          { \"prim\": \"PAIR\" },\n                          { \"prim\": \"DIG\", \"args\": [ { \"int\": \"2\" } ] },\n                          { \"prim\": \"CAR\" }, { \"prim\": \"PAIR\" },\n                          { \"prim\": \"SWAP\" }, { \"prim\": \"PAIR\" } ] ] } ] ] } ] ] } ]",
  "source": "type player is record\n  addr : address;\n  number : nat;\nend;\n\ntype state is record\n  initialized : bool;\n  minAmount : tez;\n  creator : address;\n  players : set(player);\nend;\n\ntype betParams is record\n  number : nat;\nend;\n\ntype launchLotoParams is record\n  result : nat;\nend;\n\ntype entryAction is\n  | Initialize of unit\n  | Fund of unit\n  | LaunchLoto of launchLotoParams\n  | Bet of betParams\n\nfunction cAssert(const p : bool; const s: string) : unit is\n  block { if p then skip else failwith(s) }\n  with unit\n\nfunction init (const self : state) : (state) is block {\n    cAssert(self.initialized = False, \"Creator already exist\");\n    self.initialized := True;\n    self.creator := Tezos.sender;\n    self.minAmount := 1tez;\n} with (self);\n\nfunction bet (const self : state; const num : nat) : (state) is block {\n    cAssert(Tezos.amount >= self.minAmount, \"Tezos.amount = self.minAmount\");\n    cAssert(((num > 0n) and (num <= 1000n)), \"(number > 0n) and (number <= 1000n)\");\n    const better : player = record[addr=Tezos.sender;number=num];\n    const players : set(player) = self.players;\n    self.players := Set.add(better, self.players);\n} with (self);\n\nfunction fund(const self : state) : (state) is block {\n    skip\n} with (self);\n\nfunction launchLoto(const self : state; const result : nat) : (list(operation) * state) is\n  block {\n    cAssert(Tezos.sender = self.creator, \"Tezos.sender = self.creator\");\n    cAssert((Set.size(self.players) > 0n), \"size(self.players) > 0n\");\n    const winners : set (address) = set [];\n    const ops : list(operation) = nil;\n    const final_ops : list(operation) = nil;\n    for el in set self.players block {\n      if(el.number = result) then block {\n        const winner_update : set(address) =  Set.add(el.addr, winners);\n        winners := winner_update;\n      } else skip;\n    };\n    for el in set self.players block {\n      if(el.number = result) then block {\n        const receiver : contract (unit) =\n          case (Tezos.get_contract_opt(el.addr): option(contract(unit))) of\n            Some (contract) -> contract\n          | None -> (failwith (\"Not a contract\") : (contract(unit)))\n          end;\n        const op0 : operation = transaction(unit, (Tezos.balance/(Set.size(winners))), receiver);\n        const final_ops : list(operation) = op0 # ops;\n        ops := final_ops; \n      } else skip;\n    };\n    self.players := (Set.empty : set(player));\n} with (ops, self);\n\nfunction main (const action : entryAction; const self : state) : (list(operation) * state) is\n  block {\n    skip\n  } with case action of\n  | Initialize -> ((nil : list(operation)), init(self))\n  | Fund -> ((nil : list(operation)), fund(self))\n  | Bet(params) -> ((nil : list(operation)), bet(self, params.number))\n  | LaunchLoto(params) -> launchLoto(self, params.result)\n  end",
  "sourcePath": "D:/projects/tezos-casino/ligo-contract/contracts/Loto.ligo",
  "compiler": {
    "name": "ligo",
    "version": "next"
  },
  "networks": {
    "NetXSgo1ZT2DRUG": {
      "events": {},
      "links": {},
      "address": "KT1DfePHV3bMSXBRem7PF8gDHKeVXrfBfKMq",
      "transactionHash": "opMGwUzcaiS26xN7Tod3JiXAbaretvFNr2pPS4FKr5ZDKmm78Qq"
    }
  },
  "schemaVersion": "3.2.0-tezos.1",
  "updatedAt": "2021-07-03T15:20:51.085Z",
  "networkType": "tezos"
}